"""
EXEMPLO 6: LOGGER
=================

Como usar o sistema de logs (Loguru).

PR√â-REQUISITOS:
- Pacote instalado: pip install automacoes-python-base-td
- Vari√°veis no .env: LOG_LEVEL, DEBUG_MODE (opcional)
"""

from automacoes_python_base_td.logger import setup_logger, get_logger
import time

# Configurar logger (opcional, j√° √© feito automaticamente)
setup_logger(log_level="INFO")

# Obter inst√¢ncia do logger
logger = get_logger()

class LoggerFunctions:
    """Fun√ß√µes de log"""
    def __init__(self):
        print("LoggerFunctions initialized\n")
    
    
    def __finally__(self):
        print("LoggerFunctions finally\n")


# ====================================================================
# N√çVEIS DE LOG
# ====================================================================

    def exemplo_niveis_log(self):
        """Diferentes n√≠veis de severidade"""
        logger.debug("üîç DEBUG - Informa√ß√£o t√©cnica detalhada")
        logger.info("‚ÑπÔ∏è  INFO - Informa√ß√£o geral do sistema")
        logger.warning("‚ö†Ô∏è  WARNING - Alerta, algo pode dar errado")
        logger.error("‚ùå ERROR - Erro ocorreu!")
        logger.critical("üî• CRITICAL - Erro cr√≠tico, sistema comprometido!")
        logger.success("‚úÖ SUCCESS - A√ß√£o conclu√≠da com sucesso!")


# ====================================================================
# LOGS EM FUN√á√ïES
# ====================================================================

    def processar_arquivo(self, arquivo):
        """Processa arquivo com logs"""
        logger.info(f"üìÇ Iniciando processamento: {arquivo}")
        
        try:
        # Simular processamento
            logger.debug(f"Lendo arquivo {arquivo}...")
            time.sleep(1)
            
            logger.debug("Validando dados...")
            time.sleep(1)
            
            logger.debug("Transformando dados...")
            time.sleep(1)
            
            logger.success(f"‚úÖ Arquivo {arquivo} processado com sucesso!")
            return True
            
        except FileNotFoundError:
            logger.error(f"‚ùå Arquivo n√£o encontrado: {arquivo}")
            raise
            
        except Exception as e:
            logger.critical(f"üî• Erro cr√≠tico ao processar {arquivo}: {e}")
            raise


# ====================================================================
# LOGS COM CONTEXTO
# ====================================================================

    def processar_pedido(self, pedido_id, cliente_id, valor):
        """Processa pedido com contexto"""
        logger.info(f"üõí Processando pedido #{pedido_id}")
        logger.debug(f"   Cliente: {cliente_id}")
        logger.debug(f"   Valor: R$ {valor:.2f}")
        
        try:
        # Validar
            logger.debug(f"Validando pedido #{pedido_id}...")
            if valor <= 0:
                raise ValueError("Valor inv√°lido")
            
        # Processar pagamento
            logger.info(f"üí≥ Processando pagamento...")
            time.sleep(1)
            
        # Atualizar estoque
            logger.info(f"üì¶ Atualizando estoque...")
            time.sleep(1)
            
            logger.success(f"‚úÖ Pedido #{pedido_id} conclu√≠do!")
            return True
            
        except ValueError as e:
            logger.warning(f"‚ö†Ô∏è  Pedido #{pedido_id} inv√°lido: {e}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar pedido #{pedido_id}: {e}")
            return False


# ====================================================================
# MEDIR TEMPO DE EXECU√á√ÉO
# ====================================================================

    def operacao_demorada(self):
        """Opera√ß√£o com log de tempo"""
        logger.info("‚è±Ô∏è  Iniciando opera√ß√£o demorada...")
        start = time.time()
        
    # Fazer algo...
        time.sleep(2)
        
        elapsed = time.time() - start
        logger.success(f"‚úÖ Opera√ß√£o conclu√≠da em {elapsed:.2f}s")


# ====================================================================
# LOGS EM LOOP
# ====================================================================

    def processar_lote(self, items):
        """Processa lote de items"""
        total = len(items)
        logger.info(f"üìã Processando lote de {total} items...")
        
        for i, item in enumerate(items, 1):
            logger.debug(f"Processando item {i}/{total}: {item}")
        # Processar...
            time.sleep(0.1)
            
        # Log a cada 10 items
            if i % 10 == 0:
                logger.info(f"   ‚è≥ Progresso: {i}/{total} ({i/total*100:.0f}%)")
        
        logger.success(f"‚úÖ Lote processado: {total} items")


# ====================================================================
# LOG DE ERRO COM STACK TRACE
# ====================================================================

    def funcao_com_erro(self):
        """Exemplo de log de erro com stack trace"""
        try:
        # Simular erro
            resultado = 10 / 0
        except ZeroDivisionError as e:
            logger.critical(f"‚ùå Erro de divis√£o: {e}", exc_info=True)
        # exc_info=True inclui o stack trace completo


# ====================================================================
# EXECUTAR EXEMPLOS
# ====================================================================

if __name__ == "__main__":
    logger_functions = LoggerFunctions()

    logger.info("=" * 50)
    logger.info("=== Exemplo de Logging ===")
    logger.info("=" * 50)
    
# 1. N√≠veis de log
    logger.info("üìù Testando n√≠veis de log:")
    logger_functions.exemplo_niveis_log()
    
# 2. Processar arquivo
    logger.info("üìÇ Testando processamento de arquivo:")
    logger_functions.processar_arquivo("dados.csv")
    
# 3. Processar pedido
    logger.info("üõí Testando processamento de pedido:")
    logger_functions.processar_pedido(12345, 678, 1500.00)
    
# 4. Opera√ß√£o demorada
    logger.info("‚è±Ô∏è  Testando medi√ß√£o de tempo:")
    logger_functions.operacao_demorada()
    
# 5. Processar lote
    logger.info("üìã Testando processamento em lote:")
    items = [f"item_{i}" for i in range(25)]
    logger_functions.processar_lote(items)
    
# 6. Erro com stack trace
    logger.info("‚ùå Testando erro com stack trace:")
    logger_functions.funcao_com_erro()
    
    logger.info("=" * 50)
    logger.success("‚úÖ Todos os exemplos conclu√≠dos!")
    logger.info("=" * 50)
